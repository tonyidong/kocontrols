Properties:
SuggestionsSource
	Normally keeps reference to all suggestions to be used by the Filter delegate
Suggestions
	Keeps the filtered suggestions returned by the Filter delegate
SuggestionToStringConverter
	Helps to properly convert a suggestion to text. Used by the default Filter implementation as well as the default Item display.
Implementation ISelector
	Responsible for filtering and giving back IEnumerable with results.
SuggestionPreview
	Keeps the current suggested value or free text (see the logic breakdown below)
Suggestion
	Keeps the last confirmed suggested value or free text (see the logic breakdown below)
bool IsAutoCompleteOn - determines whether the contol should act as AutoComplete.
bool IsFreeTextAllowed - determines if free text can be entered by the user and assigned to the SuggestionPreview and Suggestion proerties
bool IsEmptyValueAllowed - determines if empty suggestion value is accepted even if free text is not allowed
object EmptyValue - suggestion value to be used if no text is entered in the text box. Defaulted to null

Triggers:
Enter (Mouse Double Click), Esc, LostFocus

Actions:
1. Confirm - confirm is based on the following conditions (if conditions are not met confirm will be implicitly replaced by Cancel):
	Triggers: Enter (Mouse Double Click), LostFocus
	i) Text is Empty
		1. IsEmptyValueAllowed == true
			Confirm -> Suggestion = SuggestionPreview = EmptyValue
		2. IsEmptyValueAllowed == false
			Cancel
	ii) Text is invalid
		1. IsFreeTextAllowed  == true
			Confirm -> Suggestion = SuggestionPreview = Text
		2. IsFreeTextAllowed  == false
			Cancel
	iii) Text is valid
			Confirm -> Suggestion = SuggestionPreview
		
2. Cancel - if control looses focus and confirm fails, cancel will take place
	Triggers: Esc, LostFocus (if confirm fails)

3. MoveFocus away - listed triggers are in addition to any other means of loosing focus such as Tab-out, mouse click in other controls or deactivate/close window etc.
	Triggers: Arrows, Space, Enter

4. IsFreeTextAllowed = true and Commiting invalid text
	Make event or delegate which is invoked just before committing to convert the freetext to Suggestion object.
	Make sure that when the user exists the textbox then brings back the focus in the textbox the previously selected freetext/invalid text stays.
	
Test cases:
1. Test with empty collection
2. Test with copy and paste

ApplyFilter should not set suggestionpreview.
UI sets suggestiopreview with the following sequence of events:
	1. Rise a flag that I am setting seuggestion preview
	2. Set suggestionpreview
	3. Reset flag that I am setting suggestion preview.
	4. Validate suggestion preview and if not valid set it to null.
	
Control behaviour to accept a complex search string:
	The control should have AutoCompleteOn set to false.
	The control should have another setting which tells it what should trigger the Select method of the ISelector. The property should be InvokeSelectTrigger of type enum. This should currently give you a choice of either: AsYouType or Enter.
	If InvokeTrigger is not set to AsYouType then listen to the Select method's triggering command and invoke select.
	Make sure to close the popup with suggestions as soon as the search criteria in the TextBox changes/user types a character.
		
Other than InvokeSelectTrigger we we have to have to be able to invoke it with the mouse. To achieve that we have to have a small magnifyer icon sitting at the end of the textbox as well.
We can add this as another option in the InvokeSelectTrigger as a SearchButton option. What do you think? Also that magnifyer should we let people set their own?
	Another option should indicate whether we should display user's search string right below in the popup as a label for it to make it easier for the user to see what his/her search creteria is.
	We have to also accept a watermark and a help message.
	We should let the uesr inject filter commands similarily to the button commands below the suggestions. In the test application we will implement 2 of them:
		1. A save filter button to save the current filter.
		2. A show and select previously saved filters button.
		3. Help button which can popup a help window to show the use how to use the control.
		
In the test app we should show the user how to inject a button similar to "New" and "Edit" called help which can popup help window to show the ues how to work with the control.

Control behaviour to popup a search window.
	We know that pop ups are bad but some users prefer a nice big popup to make their selection with advanced search. The popup has the advantage of having the possibility to 
	contain complex search controls like AutoSuggest's and others.
	We have to implement the search window which pops up, the interfaces which will drive it and which will pass back the selected values(can be muliple) and provide a default implementation.
	
Control which acceptes multiple suggestions
	The control is a multiline alternative to the above behaviours.
	It should consists of one of the above and an ISelector (GridView or ListView) where to store the results. It should also be able to on hover display a small "x" to allow for removal from the collection.
	Be aware that when the user invokes the search form if there is one the selected elements may have to be passed to the search form in case the user needs them.

	
	
	